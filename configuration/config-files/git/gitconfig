[user]
	# This setting forces you to set your user.name and user.email
	# using a configuration if there is no global configuration set
	useConfigOnly = true
	name = Ricardo Amores
	email = rickyah@gmail.com

# These settings are defined in global gitconfig files so the emails are not
# stored publicly on the git repository.
# The idea is to always include a file named work_gitconfig that may
# or may not be present (everything will work ok if the file is not present)
# On that file, you conditionally include another file to set up different
# config values depending on if you are in a  folder containing a work repo.
# You need to do this doubble indirection so you can have a vile (work_config)
# where you define the folder where the work repositories are (this may change
# in different machines or even be set up by policy, so you need to be able
# to configure it)

[include]
	path = ./work_gitconfig

[color]
	ui = true
	branch = auto
	diff = auto
	status = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "status"]
	added = green
	changed = yellow
	untracked = cyan

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

	# This conflict style also shows both conflicted changes AND how the diff
    # was before any conflict giving more context
	conflictstyle = zdiff3

[mergetool "vscode"]
	cmd = code --wait $MERGED

[svn]
	# push empty directory removals back to svn as directory deletes
	rmdir = true

[core]
	excludesfile = ~/.gitignore_global
	mergeoptions = --no-ff --no-commit
	autocrlf = input
	pager = delta



[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[submodule]
  # Work on N submodules at the same time
	fetchJobs = 4

[alias]
# checkouts
	co = checkout
	cb = checkout -b
	ct = checkout -t
	cr = checkout --
	unstage = reset HEAD
	# fco - checkout git branch/tag with fzf
	fco = "!f() { source ~/.config/shell/50_functions; fco; }; f"
	fbd = "!f() { source ~/.config/shell/50_functions; fbd; }; f"
	fbfd = "!f() { source ~/.config/shell/50_functions; fbD; }; f"
# submodules
	sm = submodule
	# update submodules
	smu = "!f() { git submodule update --init --recursive $1; }; f"
	# better submodule status: shows the latests commit on each submodule
	sms = "!f() { \
			git --no-pager submodule foreach --recursive --quiet 'git show HEAD --no-patch --format=\"%C(magenta)$name%C(yellow) ->%d%n%C(red)%h%C(reset) - %s %C(green)(%cr) %C(bold blue)<%an>%C(reset)\"'; \
 }; \
			f"

# branch management
	# show local branches
	b = branch -vv
	# show local and remote branches
	ba = branch -avv
	# delete local branch
	brml = branch -d
	# delete remote branch
	brmr = branch -d --remote
	# forcely deletes a local branch
	brml-f = branch -D
	# delete both the local and the remote branches
	brma = "!f() { git branch -d $1 && git branch -d --remote origin/$1; }; f"
	# changes the name of a branch
	bmv = branch -m

# remotes
	# show remotes with their location
	re = remote -v

#rebases & squash
	rb = rebase
	rbi = rebase -i
	rbc = rebase --continue
	rba = rebase --abort
	rbs = rebase --skip

#squashes
	sq = "!f() { git rebase --autosquash -i HEAD~$1; }; f"

# tags
	t = tag -l

# stashes
	st = stash
	stl = stash list
	stp = stash pop
	sts = "!f() { git stash show stash@{$1}; }; f"
	std = "!f() { git stash show stash@{$1} -U5; }; f"
	strm = "!f() { git stash drop stash@{$1}; }; f"

#commits
	# Creates a commit using the EDITOR. Appends the diff of the changes as comments
	# in the edited commit message for reference
	c = commit -v


[alias]
# checkouts
	co = checkout
	cb = checkout -b
	ct = checkout -t
	cr = checkout --
	unstage = reset HEAD
	# fco - checkout git branch/tag with fzf
	fco = "!f() { source ~/.config/shell/50_functions; fco; }; f"
	fbd = "!f() { source ~/.config/shell/50_functions; fbd; }; f"
	fbfd = "!f() { source ~/.config/shell/50_functions; fbD; }; f"
# submodules
	sm = submodule
	# update submodules
	smu = "!f() { git submodule update --init --recursive $1; }; f"
	# better submodule status: shows the latests commit on each submodule
	sms = "!f() { \
			git --no-pager submodule foreach --recursive --quiet 'git show HEAD --no-patch --format=\"%C(magenta)$name%C(yellow) ->%d%n%C(red)%h%C(reset) - %s %C(green)(%cr) %C(bold blue)<%an>%C(reset)\"'; \
		 }; \
	f"

# branch management
	# show local branches
	b = branch -vv
	# show local and remote branches
	ba = branch -avv
	# delete local branch
	brml = branch -d
	# delete remote branch
	brmr = branch -d --remote
	# forcely deletes a local branch
	brml-f = branch -D
	# delete both the local and the remote branches
	brma = "!f() { git branch -d $1 && git branch -d --remote origin/$1; }; f"
	# changes the name of a branch
	bmv = branch -m

# remotes
	# show remotes with their location
	re = remote -v

#rebases & squash
	rb = rebase
	rbi = rebase -i
	rbc = rebase --continue
	rba = rebase --abort
	rbs = rebase --skip

#squashes
	sq = "!f() { git rebase --autosquash -i HEAD~$1; }; f"

# tags
	t = tag -l

# stashes
	st = stash -u
	stl = stash list
	stp = stash pop
	sts = "!f() { git stash show stash@{$1}; }; f"
	std = "!f() { git stash show stash@{$1} -U5; }; f"
	strm = "!f() { git stash drop stash@{$1}; }; f"

#commits
	# Creates a commit using the EDITOR. Appends the diff of the changes as comments
	# in the edited commit message for reference
	c = commit -v

	# Creates a commit with a message string passed as parameter without using
	# the EDITOR
	cm = commit -m

	# Stages all modified/added files and creates a commit with a message string
	# passed as parameter without using the EDITOR
	cma = commit -am

	# Creates a fixup commit from the latest commit in HEAD
	cfr = "!f() { git commit --fixup HEAD; }; f"

	# Creates a fixup commit to the commit in the history that
	# matches the specified regular expression
	cfs = "!f() { git commit --fixup :/$1; }; f"

# pushes & pulls
	f = fetch --prune
	# always prune remote branches
	fetch = fetch --prune
	ps = push
	# push the current local branch to origin and track it
	psnb = "!f() { git push origin $(git rev-parse --abbrev-ref HEAD) --set-upstream;}; f"
	pl = pull --prune
	ps-f = "push --force"
	# push force without push -f privileges: delete the remote branch and push it again
	ps-ff = "!f(){\
		BRANCH_NAME=$(git rev-parse --abbrev-ref --symbolic-full-name HEAD);\
		git push origin :$BRANCH_NAME;\
		git psnb;\
	};f"

# status & log
	s = status -sb
	ss = status
	# Log oneline with more information
	l = "!f() { git log $@ --pretty=format:'%Cred%h%Creset %<(75,trunc)%s %Cgreen%<(16,trunc)%cd %<(16,trunc)%C(bold blue)%an%Creset %C(yellow)%d' --date=format:'%d-%b-%y %H:%M' --color=always;}; f"
	# log oneline showing graph
	lg = "!f() { git log $@ --graph --pretty=format:'%>|(20)%Cred%h%Creset %<(52,trunc)%s %Cgreen%cr %<(16,trunc)%C(bold blue)%an%Creset %C(yellow)%D' --color=always;};f"
	# show tracked branches
	tracked = "!d() { git for-each-ref --format='%(refname:short)' refs/heads/ | while read b; do if r=$(git config --get branch.$b.remote); then m=$(git config --get branch.$b.merge); echo \"$b -> $r/${m##*/}\"; fi; done } ; d"

# reflog

	rl = "!f() { git log --walk-reflogs $@ --pretty=format:'%Cred%h %Cgreen%<(11,trunc)%cd%Creset %gs %C(magenta)[%s] %C(yellow)%d' --date=format:'%d-%m %H:%M' --color=always;}; f"
## diff

	# diff unstaged changes
	d = diff
	# diff staged changes
	dc = diff --cached
	# diff last commited change
	dlast = diff HEAD^

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

#reset
	r = reset
	rh = reset HEAD
	rhh = reset HEAD --hard

# cherry -pick
	cp = cherry-pick
[push]
	default=simple
	autoSetupRemote = true

[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[init]
	defaultBranch = main

[rerere]
  # REuse REcorded REsolution: this feature caches the way you resolved conflicts
  # If you have to re-apply them for some reason (e.g: reintegrating a main branch
  # into your work branch multiple times so you don't have to repeat the conflict
  # resolution each time you merge)
  # https://git-scm.com/book/en/v2/Git-Tools-Rerere
	enabled = true

[interactive]
	diffFilter = delta --color-only

[delta]
	# on windows powershell you must:
	# - Install less and delta from scoop
	# - set this two env variables for this to work:
	#    - $env:GIT_PAGER="C:/Users/$Env:UserName/scoop/shims/delta.exe"
	#    - $env:DELTA_PAGER="C:/Users/$Env:UserName/scoop/shims/less.exe"
	#    (Better to set both on this on Powershell's $profile file)
	line-numbers = true
	side-by-side = true
	navigate = true
	syntax-theme = gruvbox-dark
	#delta = true

[interactive]
#	diffFilter = delta --color-only --paging=never

[safe]
	directory = %(prefix)/C:/Development/UE/UE_ActionRoguelike
	directory = C:/Development/UE/Left4Loot
	directory = %(prefix)/C:/Development/MediaTonic/FallGuys
	directory = *
[credential]
	useHttpPath = true
	helper = manager
[credential "helperselector"]
	selected = manager
