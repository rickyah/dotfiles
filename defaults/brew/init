#!/bin/bash

# install brew if it does not exists

app_name="Homebrew"
app_cmd="brew"
app_install_cmd='ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"'
check_app_installation=`type $app_cmd &>/dev/null && echo "" || echo "notfound"`

echo "---------------------------------------------------------------------------------"
echo "This script install the Homebrew if it is not installed"
echo "Also updates Homebrew to the lastest version and all the formulaes"
echo "---------------------------------------------------------------------------------"

if [ -n "$check_app_installation" ]; then
  # brew not found, ask user if we should install it
  echo "$app_name was not found in the system, To install it, this command needs be executed:"
  echo $app_install_cmd

  read -p "Do you want me to install it? (y/n)" -n 1
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "Ok, installing $app_name"
    eval $app_install_cmd
  else
    echo
    echo "Aborting"
    exit 2
  fi

else
  echo "$app_name is already installed"
  echo `$app_cmd --version` 
fi

# Make sure the global brew prefix is on the path
[[ `which brew` ]] && export PATH=$(brew --prefix)/bin:$PATH

echo "Update homebrew to make sure we’re using the latest version"
brew update

echo "Upgrading already-installed formulae"
brew upgrade

echo "Installing GNU core utilities (those that come with OS X are outdated)"
brew install coreutils

echo "Installing GNU 'find', 'locate', 'updatedb', and 'xargs', g-prefixed"
brew install findutils

echo "Installing Bash 4"
brew install bash

echo "Installing wget"
brew install wget

echo "Installing more recent versions of some OS X tools"
brew tap homebrew/dupes
brew install homebrew/dupes/grep

echo "Installing git & git-flow"
brew install git bash-completion git-flow

echo "Installing imagemagick"
brew install imagemagick

echo "Installing node"
brew install node

echo "Removing outdated versions from the cellar"
brew cleanup

echo "Done"

echo "Don’t forget to add $(brew --prefix coreutils)/libexec/gnubin to \$PATH."
