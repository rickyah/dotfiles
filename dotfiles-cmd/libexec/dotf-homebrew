#!/usr/bin/ruby

# Usage: dotf homebrew
# Summary: Installs homebrew and some brew packages by default
# Help: This will install homebrew and the packages defined in the 
# file shared/brew-app-list.txt

require 'mkmf'

app_name = "Homebrew"
app_cmd = "brew"
app_install_cmd = 'ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"'

app_list_filepath = "#{ENV["_DOTF_ROOT"]}/share/brew-app-list.txt"

puts "---------------------------------------------------------------------------------"
puts "This script installs #{app_name} if it is not installed"
puts "---------------------------------------------------------------------------------"


if find_executable(app_cmd).nil?

  puts "#{app_name} was not found in the system, To install it, this command needs be executed:"
  puts app_install_cmd

  puts "Do you want me to install it? (y/n)"

  if gets.chomp =~ /^[Yy]/
    puts "Ok, installing #{app_name}"
    system app_install_cmd
  else
    puts "Aborting"
    exit 2
  end

else
  puts "Found #{app_name} in the system: version #{%x(#{app_cmd} --version)}"
end

apps_to_install = File.read(app_list_filepath)
  .split("\n")
  .select{|line| !line.start_with?('#') && !line.empty? }

if (apps_to_install.empty?)
  puts "The list of apps to install is empty."
  puts "Please put the apps to install with #{app_name} in the file brew-app-list.txt located in the share folder"
  exit 2
end

puts "Updating homebrew to make sure we’re using the latest version"
system('brew update')
system('tap homebrew/dupes')

apps_to_install.each do |app_name|
  puts "Installing #{app_name}"
  unless system "#{app_cmd} install #{app_name}"
    puts "Couldn't find #{app_name} skipping..."
  end
end

puts "Installing highlight"
system('brew install highlight')

puts "Removing outdated versions from the cellar"
system('brew cleanup')



puts "Done"
puts "Don’t forget to add $(brew --prefix coreutils)/libexec/gnubin to \$PATH."
